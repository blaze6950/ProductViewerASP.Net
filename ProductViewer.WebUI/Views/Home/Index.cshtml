@using ProductViewer.WebUI.Models
@model ProductListViewModel

@{
    ViewBag.Title = "List of products";
}

<div id="indexView">
    <header>
        <nav>
            <div class="nav-wrapper">
                <a onclick="location.reload()" class="brand-logo"><i class="material-icons">cloud</i>Products</a>
                <ul class="right hide-on-med-and-down">
                    <li>
                        <nav>
                            <div class="nav-wrapper">
                                @using (Html.BeginForm("Index", "Home", FormMethod.Get))
                                {
                                    <div class="input-field">
                                        <input id="search" type="search" name="searchValue" value="@Model.SearchValue">
                                        <label class="label-icon" for="search"><i class="material-icons">search</i></label>
                                        <i class="material-icons">close</i>
                                    </div>
                                    @Html.HiddenFor(x => x.PagingInfo.CurrentPage)
                                    @Html.HiddenFor(x => x.SortConfig)
                                }
                            </div>
                        </nav>
                    </li>
                    <li><a onclick="openModal(false, 0)"><i class="material-icons right">add</i>ADD NEW PRODUCT</a></li>
                </ul>
            </div>
        </nav>
    </header>

    <div class="card-content container">
        <!-- Modal Structure -->
        <div id="modal1" class="modal modal-fixed-footer">
            <div class="modal-content">

            </div>
            <div class="modal-footer">
                <a onclick="" class="modal-close waves-effect waves-light btn-large"><i class="material-icons left">cancel</i>Cancel</a>
                <a onclick="sendInfo()" class="modal-close waves-effect waves-light btn-large"><i class="material-icons left">send</i>Submit</a>
            </div>
        </div>
        @*<div class="card-panel grey lighten-5">
            <table class="highlight">
                <thead>
                <tr>
                    @Html.SortColumn(@Model.SortConfig, s => @Url.Action("Index", new { page = @Model.PagingInfo.CurrentPage, searchValue = @Model.SearchValue, sortCurrentCol = @Model.SortConfig.CurrentColumn, sortCurrentDir = @Model.SortConfig.IsAsc, sortColumn = s }))
                    <th></th>
                    <th></th>
                </tr>
                </thead>

                <tbody>
                @foreach (var p in @Model.Products)
                {
                    <tr class="tr">
                        <td class="withId" id="@p.ProductEntityId">@p.ProductEntityName</td>
                        <td>@p.ProductDescriptionEntityDescription</td>
                        <td>@p.ProductListPriceHistoryEntityListPrice.ToString("C")</td>
                        <td>@p.ProductInventoryEntityQuantity</td>
                        <td>@p.PriceForAll.ToString("C")</td>
                        <td>
                            <a onclick="openModal(true, @p.ProductEntityId)" id="@p.ProductEntityId" class="btn-floating btn waves-effect waves-light orange"><i class="material-icons">edit</i></a>
                        </td>
                        <td>
                            <a class="btn-floating btn waves-effect waves-light red" onclick="callConfirmationAlert(@p.ProductEntityId)"><i class="material-icons">delete</i></a>
                        </td>
                    </tr>
                }
                </tbody>

            </table>
            <div>
                @Html.PageLinks(Model.PagingInfo, x => Url.Action("Index", new { page = x, searchValue = @Model.SearchValue, sortCurrentCol = @Model.SortConfig.CurrentColumn, sortCurrentDir = !(@Model.SortConfig.IsAsc), sortColumn = @Model.SortConfig.CurrentColumn }))
            </div>
        </div>*@
        
        @*define the HTML div that will contain the Grid*@
        <div id="grid"></div>

    </div>
</div>
<script>
    $(document).ready(function() {
        $(".modal").modal({ onCloseEnd: function() {
            M.toast({ html: '<p><i class=\'material-icons right\'>cancel</i>Action cancelled</p>' });
        }
        });
        $('.tr').click(function openProductDetails(el) {
            var e = el || window.event;
            var target = $(el.target || el.srcElement);
            if (!target.is('i.material-icons')) {
                var id = parseInt($(this).children('td.withId').attr('id'), 10);
                if (id != undefined && typeof id === "number") {
                    document.location = "/Home/ProductDetails/" + id;
                }
            }
        });
        $("#grid").kendoGrid({
            dataSource: {   
                transport: { 
                    type: "odata",
                    read: {
                        url: "@Url.Action("GetProducts", "Home")"
                    }
                },
                schema: {
                    data: "Data",
                    model: {
                        fields: {
                            ProductEntityId: { type: "number" },
                            ProductEntityName: { type: "string" },
                            ProductDescriptionEntityDescription: { type: "string" },
                            ProductListPriceHistoryEntityListPrice: { type: "number" },
                            ProductInventoryEntityQuantity: { type: "number" },
                            PriceForAll: { type: "number" }
                        }
                    }
                },
                serverPaging: true,
                serverSorting: true,
                serverFiltering: true,
                serverGrouping: true,
                serverAggregates: true
            },
            columns: [
                { field: "ProductEntityId", title: "ID", type: "number", hidden: true },
                { field: "ProductEntityName", title: "Name", type: "string" },
                { field: "ProductDescriptionEntityDescription", title: "Description", type: "string" },
                { field: "ProductListPriceHistoryEntityListPrice", title: "Price", type: "number" },
                { field: "ProductInventoryEntityQuantity", title: "Quantity", type: "number" },
                { field: "PriceForAll", title: "Price for all", type: "number" }
            ],
            height: 600,
            pageable: {
                pageSize: 5
            },
            selectable: true
        });
    });
    function callConfirmationAlert(idRemovableItem) {
        if (idRemovableItem != undefined && typeof idRemovableItem === "number") {
            let text = $(`#${idRemovableItem}`).text();
            const confirmation = confirm(`Are you sure? Deleting ${text}...`);
            if (confirmation) {
                $.ajax({
                    url: '@Url.Action("RemoveItem", "Home")/' + idRemovableItem,
                    cache: false,
                    type: "POST",
                    success: function() {
                        M.toast({ html: '<p><i class=\'material-icons right\'>delete</i>Product deleted!</p>'});
                    },
                    error: function() {
                        M.toast({ html: '<p><i class=\'material-icons right\'>error</i>Something went wrong! Try again!</p>'});
                    }
                });
            }
        }
    }
    function openModal(isEditing, id) {
        if (isEditing != undefined && typeof isEditing === "boolean" && id != undefined && typeof id === "number") {
            var url;
            if (isEditing === false) {
                url = "@Url.Action("AddOrEditProduct")";
                $.ajax({
                    url: url,
                    cache: false,
                    type: "GET",
                    success: function (result) {

                        $('.modal-content').html(result);
                        /* little fade in effect */
                        $('.modal-content').fadeIn('fast');
                    },
                    error: function (reponse) {
                        alert("error : " + reponse);
                    }
                });
            } else {
                url = "@Url.Action("AddOrEditProduct", new{isEditing = true, id = 0})";
                url = url.replace("0", id);
                $.ajax({
                    url: url,
                    cache: false,
                    type: "GET",
                    success: function (result) {

                        $('.modal-content').html(result);
                        /* little fade in effect */
                        $('.modal-content').fadeIn('fast');
                        window.M.updateTextFields();
                    },
                    error: function (reponse) {
                        alert("error : " + reponse);
                    }
                });
            }
            $("#modal1").modal('open');
        }
    }
    function sendInfo() {
        $.ajax({
            type: "POST",
            url: "/Home/AddOrEditProduct",
            data: $('#addOrEditForm').serialize(),
            success: function (isSuccess) {
                if (isSuccess != undefined && isSuccess === 'True') {
                    $("#modal1").modal('close');
                    M.toast({ html: '<p><i class=\'material-icons right\'>done</i>Product has been saved!</p>' })
                } else if(isSuccess != undefined) {
                    $('.modal-content').html(isSuccess);
                    window.M.updateTextFields();
                    $("#modal1").modal('open');
                }
            },
            error: function () {
                M.toast({
                    html: '<p><i class=\'material-icons right\'>warning</i>Something went wrong!Try again</p>'
                });
            }
        });
        location.reload();
    }
</script>