@using ProductViewer.WebUI.Models
@model ProductListViewModel

@{
    ViewBag.Title = "List of products";
}

<div class="card-header">
    <h1 class="h1">Products:</h1>
</div>
<div class="card-body">
    @using (Html.BeginForm("Index", "Home", FormMethod.Get))
    { 
        <div class="card-panel teal lighten-5">
            <div class="input-field col s12" data-tip="To find something, you need to know what to look for! Enter at least one character and press Enter...">
                <i class="material-icons prefix">search</i>
                <input value="@Model.SearchValue" name="searchValue" id="search" type="text" class="validate" />
                @Html.HiddenFor(x=>x.PagingInfo.CurrentPage)
                @Html.HiddenFor(x=>x.SortConfig)
                <label for="search">Search:</label>
            </div>
        </div>
    }
    <a class="waves-effect waves-light btn-large" href="@Url.Action("AddOrEditProduct", new { isEditing = false })" style="margin-bottom: 0.6em"><i class="material-icons right">add</i>Add new product</a>
    <div class="card-panel grey lighten-5">
        <table class="highlight">
            <thead>
            <tr>
                @Html.SortColumn(@Model.SortConfig, s => @Url.Action("Index", new {page = @Model.PagingInfo.CurrentPage, searchValue = @Model.SearchValue, sortCurrentCol = @Model.SortConfig.CurrentColumn, sortCurrentDir = @Model.SortConfig.IsAsc, sortColumn = s}))
                <th></th>
                <th></th>
            </tr>
            </thead>

            <tbody>
            @foreach (var p in @Model.Products)
            {
                <tr>
                    <td id="@p.ProductEntityId">@p.ProductEntityName</td>
                    <td>@p.ProductDescriptionEntityDescription</td>
                    <td>@p.ProductListPriceHistoryEntityListPrice.ToString("C")</td>
                    <td>@p.ProductInventoryEntityQuantity</td>
                    <td>@p.PriceForAll.ToString("C")</td>
                    <td>
                        <a href="@Url.Action("AddOrEditProduct", new { isEditing = true, id = p.ProductEntityId })" id="@p.ProductEntityId" class="btn-floating btn waves-effect waves-light orange"><i class="material-icons">edit</i></a>
                    </td>
                    <td>
                        <a class="btn-floating btn waves-effect waves-light red" onclick="callModal(@p.ProductEntityId)"><i class="material-icons">delete</i></a>
                    </td>
                </tr>
            }
            </tbody>

        </table>
        <div>
            @Html.PageLinks(Model.PagingInfo, x => Url.Action("Index", new { page = x, searchValue = @Model.SearchValue, sortCurrentCol = @Model.SortConfig.CurrentColumn, sortCurrentDir = !(@Model.SortConfig.IsAsc), sortColumn = @Model.SortConfig.CurrentColumn}))
        </div>
    </div>
</div>
<script>
    function callModal(idRemovableItem) {
        if (idRemovableItem != undefined) {
            let text = $(`#${idRemovableItem}`).text();
            const confirmation = confirm(`Are you sure? Deleting ${text}...`);
            if (confirmation) {
                text = `/Home/RemoveItem/${idRemovableItem}`;
                location.href = text;
                Materialize.toast('<p><i class=\'material-icons right\'>delete</i>Product deleted!</p>');
            }
        }
    }
</script>